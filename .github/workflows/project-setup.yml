name: Advanced Project Setup

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup-project:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    - name: Create project structure
      run: |
        # Create directories for API, frontend, tests, and documentation
        mkdir -p src/{api/{controllers,models,routes},utils,config,middleware} public/{css,js,images} tests/{unit,integration} docs

        # Create sample backend server
        echo "const express = require('express');
        const cors = require('cors');
        const helmet = require('helmet');
        const morgan = require('morgan');
        const config = require('./config');
        const apiRoutes = require('./api/routes');
        const app = express();
        app.use(helmet());
        app.use(cors());
        app.use(morgan('combined'));
        app.use(express.json());
        app.use('/api', apiRoutes);
        app.use((err, req, res, next) => {
          console.error(err.stack);
          res.status(500).send('Something broke!');
        });
        const PORT = process.env.PORT || config.port;
        app.listen(PORT, () => console.log(\`Server running on port \${PORT}\`));" > src/server.js

        # Create additional backend and frontend files (controllers, models, routes, etc.)
        echo "const mongoose = require('mongoose');
        mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/myapp', { useNewUrlParser: true, useUnifiedTopology: true })
          .then(() => console.log('Connected to MongoDB'))
          .catch(err => console.error('Could not connect to MongoDB', err));
        module.exports = mongoose;" > src/api/models/db.js

        echo "const express = require('express');
        const userController = require('../controllers/userController');
        const authMiddleware = require('../../middleware/authMiddleware');
        const router = express.Router();
        router.post('/users', userController.createUser);
        router.get('/users', authMiddleware, userController.getUsers);
        module.exports = router;" > src/api/routes/userRoutes.js

        echo "const User = require('../models/userModel');
        const { validateUser } = require('../../utils/validators');
        exports.createUser = async (req, res) => { const { error } = validateUser(req.body); if (error) return res.status(400).send(error.details[0].message); let user = new User(req.body); user = await user.save(); res.status(201).send(user); };" > src/api/controllers/userController.js

        echo "import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'
        const app = createApp({ data() { return { message: 'Welcome to Likhon\'s Portfolio' } } })
        app.mount('#root')" > public/js/app.js

        # Create test files
        echo "const assert = require('assert');
        describe('User Validation', () => {
          it('should validate a correct user object', () => {
            assert.strictEqual(true, true);
          });
        });" > tests/unit/userValidation.test.js

        # Create README.md in root directory
        echo "# Likhon Sheikh - Full-stack Developer Portfolio
        This project showcases my skills as a full-stack developer, featuring a modern web application built with Node.js, Express, MongoDB, and Vue.js.
        ## Getting Started
        1. Clone the repository
        2. Install dependencies: \`npm install\`
        3. Run the server: \`npm start\`
        ## Testing
        Run tests with: \`npm test\`
        ## License
        This project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details." > README.md

    - name: Set up project dependencies
      run: |
        npm install express mongoose bcrypt jsonwebtoken joi helmet cors morgan
        npm install --save-dev nodemon jest supertest

    - name: Check for changes
      id: git-check
      run: |
        git status --porcelain

    - name: Commit changes
      if: steps.git-check.outputs.result != ''
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add .
        git commit -m "Create advanced project structure with sample files"
        git push
