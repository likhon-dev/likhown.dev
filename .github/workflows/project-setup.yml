name: Advanced Project Setup

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup-project:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        persist-credentials: true
        token: ${{ secrets.GITHUB_TOKEN }}  # Ensure the token is available for git push

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'  # Updated from '16' to '20' to avoid deprecation warning

    - name: Create project structure
      run: |
        # Create directories
        mkdir -p src/{api/{controllers,models,routes},utils,config,middleware} public/{css,js,images} tests/{unit,integration} docs

        # Create backend files
        echo "const express = require('express');
        const cors = require('cors');
        const helmet = require('helmet');
        const morgan = require('morgan');
        const config = require('./config');
        const apiRoutes = require('./api/routes');

        const app = express();

        app.use(helmet());
        app.use(cors());
        app.use(morgan('combined'));
        app.use(express.json());

        app.use('/api', apiRoutes);

        app.use((err, req, res, next) => {
          console.error(err.stack);
          res.status(500).send('Something broke!');
        });

        const PORT = process.env.PORT || config.port;
        app.listen(PORT, () => console.log(\`Server running on port \${PORT}\`));" > src/server.js

        echo "const mongoose = require('mongoose');
        const config = require('../config');

        mongoose.connect(config.dbUri, { useNewUrlParser: true, useUnifiedTopology: true })
          .then(() => console.log('Connected to MongoDB'))
          .catch(err => console.error('Could not connect to MongoDB', err));

        module.exports = mongoose;" > src/api/models/db.js

        echo "const express = require('express');
        const userController = require('../controllers/userController');
        const authMiddleware = require('../../middleware/authMiddleware');

        const router = express.Router();

        router.post('/users', userController.createUser);
        router.get('/users', authMiddleware, userController.getUsers);
        router.get('/users/:id', authMiddleware, userController.getUserById);
        router.put('/users/:id', authMiddleware, userController.updateUser);
        router.delete('/users/:id', authMiddleware, userController.deleteUser);

        module.exports = router;" > src/api/routes/userRoutes.js

        echo "const User = require('../models/userModel');
        const { validateUser } = require('../../utils/validators');

        exports.createUser = async (req, res) => {
          try {
            const { error } = validateUser(req.body);
            if (error) return res.status(400).send(error.details[0].message);

            let user = new User(req.body);
            user = await user.save();
            res.status(201).send(user);
          } catch (error) {
            res.status(500).send('Server error');
          }
        };

        exports.getUsers = async (req, res) => {
          try {
            const users = await User.find();
            res.send(users);
          } catch (error) {
            res.status(500).send('Server error');
          }
        };

        exports.getUserById = async (req, res) => {
          try {
            const user = await User.findById(req.params.id);
            if (!user) return res.status(404).send('User not found');
            res.send(user);
          } catch (error) {
            res.status(500).send('Server error');
          }
        };

        exports.updateUser = async (req, res) => {
          try {
            const { error } = validateUser(req.body);
            if (error) return res.status(400).send(error.details[0].message);

            const user = await User.findByIdAndUpdate(req.params.id, req.body, { new: true });
            if (!user) return res.status(404).send('User not found');
            res.send(user);
          } catch (error) {
            res.status(500).send('Server error');
          }
        };

        exports.deleteUser = async (req, res) => {
          try {
            const user = await User.findByIdAndRemove(req.params.id);
            if (!user) return res.status(404).send('User not found');
            res.send(user);
          } catch (error) {
            res.status(500).send('Server error');
          }
        };" > src/api/controllers/userController.js

        echo "const mongoose = require('mongoose');
        const bcrypt = require('bcrypt');

        const userSchema = new mongoose.Schema({
          name: { type: String, required: true, minlength: 3, maxlength: 50 },
          email: { type: String, required: true, unique: true, minlength: 5, maxlength: 255 },
          password: { type: String, required: true, minlength: 5, maxlength: 1024 },
          isAdmin: Boolean
        });

        userSchema.pre('save', async function(next) {
          if (this.isModified('password')) {
            const salt = await bcrypt.genSalt(10);
            this.password = await bcrypt.hash(this.password, salt);
          }
          next();
        });

        userSchema.methods.comparePassword = async function(candidatePassword) {
          return bcrypt.compare(candidatePassword, this.password);
        };

        const User = mongoose.model('User', userSchema);

        module.exports = User;" > src/api/models/userModel.js

        echo "const jwt = require('jsonwebtoken');
        const config = require('../config');

        module.exports = function (req, res, next) {
          const token = req.header('x-auth-token');
          if (!token) return res.status(401).send('Access denied. No token provided.');

          try {
            const decoded = jwt.verify(token, config.jwtSecret);
            req.user = decoded;
            next();
          } catch (ex) {
            res.status(400).send('Invalid token.');
          }
        };" > src/middleware/authMiddleware.js

        echo "const Joi = require('joi');

        exports.validateUser = (user) => {
          const schema = Joi.object({
            name: Joi.string().min(3).max(50).required(),
            email: Joi.string().min(5).max(255).required().email(),
            password: Joi.string().min(5).max(255).required(),
            isAdmin: Joi.boolean()
          });

          return schema.validate(user);
        };" > src/utils/validators.js

        echo "module.exports = {
          port: process.env.PORT || 3000,
          dbUri: process.env.MONGODB_URI || 'mongodb://localhost:27017/myapp',
          jwtSecret: process.env.JWT_SECRET || 'your_jwt_secret'
        };" > src/config/index.js

        # Create frontend files
        echo "<!DOCTYPE html>
        <html lang=\"en\">
        <head>
            <meta charset=\"UTF-8\">
            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
            <title>Likhon Sheikh - Full-stack Developer</title>
            <link rel=\"stylesheet\" href=\"css/styles.css\">
        </head>
        <body>
            <div id=\"root\"></div>
            <script src=\"js/app.js\" type=\"module\"></script>
        </body>
        </html>" > public/index.html

        echo "/* Reset and base styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f4f4f4;
        }

        .container {
            width: 80%;
            margin: auto;
            overflow: hidden;
            padding: 0 20px;
        }

        header {
            background: #333;
            color: #fff;
            padding-top: 30px;
            min-height: 70px;
            border-bottom: #0779e4 3px solid;
        }

        header a {
            color: #fff;
            text-decoration: none;
            text-transform: uppercase;
            font-size: 16px;
        }

        header ul {
            padding: 0;
            list-style: none;
        }

        header li {
            display: inline;
            padding: 0 20px 0 20px;
        }

        header #branding {
            float: left;
        }

        header #branding h1 {
            margin: 0;
        }

        header nav {
            float: right;
            margin-top: 10px;
        }

        header .highlight, header .current a {
            color: #0779e4;
            font-weight: bold;
        }

        header a:hover {
            color: #ffffff;
            font-weight: bold;
        }

        /* Add more styles as needed */" > public/css/styles.css

        echo "import { createApp } from 'https://unpkg.com/vue@3/dist/vue.esm-browser.js'

        const app = createApp({
          data() {
            return {
              message: 'Welcome to Likhon Sheikh\'s Portfolio'
            }
          }
        })

        app.mount('#root')" > public/js/app.js

        # Create test files
        echo "const assert = require('assert');
        const { validateUser } = require('../../src/utils/validators');

        describe('User Validation', () => {
          it('should validate a correct user object', () => {
            const user = {
              name: 'John Doe',
              email: 'john@example.com',
              password: 'password123'
            };
            const { error } = validateUser(user);
            assert.strictEqual(error, undefined);
          });

          it('should invalidate a user with short name', () => {
            const user = {
              name: 'Jo',
              email: 'john@example.com',
              password: 'password123'
            };
            const { error } = validateUser(user);
            assert.notStrictEqual(error, undefined);
          });

          // Add more test cases
        });" > tests/unit/userValidation.test.js

        # Create documentation
        echo "# API Documentation

        ## Users

        ### Get all users
        - Method: GET
        - Endpoint: /api/users
        - Headers: x-auth-token (JWT token)

        ### Get user by ID
        - Method: GET
        - Endpoint: /api/users/:id
        - Headers: x-auth-token (JWT token)

        ### Create user
        - Method: POST
        - Endpoint: /api/users
        - Body: { name, email, password }

        ### Update user
        - Method: PUT
        - Endpoint: /api/users/:id
        - Headers: x-auth-token (JWT token)
        - Body: { name, email, password }

        ### Delete user
        - Method: DELETE
        - Endpoint: /api/users/:id
        - Headers: x-auth-token (JWT token)

        ## More endpoints to be added..." > docs/API.md

        # Create README.md in root directory
        echo "# Likhon Sheikh - Full-stack Developer Portfolio

        This project showcases my skills as a full-stack developer, featuring a modern web application built with Node.js, Express, MongoDB, and Vue.js.

        ## Features

        - RESTful API with Express
        - MongoDB integration with Mongoose
        - User authentication and authorization
        - Frontend built with Vue.js
        - Comprehensive test suite
        - Detailed API documentation

        ## Getting Started

        1. Clone the repository
        2. Install dependencies: \`npm install\`
        3. Set up environment variables (see \`.env.example\`)
        4. Run the server: \`npm start\`
        5. Visit \`http://localhost:3000\` in your browser

        ## Testing

        Run tests with: \`npm test\`

        ## API Documentation

        See \`docs/API.md\` for detailed API documentation.

        ## License

        This project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details." > README.md

    - name: Set up project dependencies
      run: |
        npm init -y
        npm install express mongoose bcrypt jsonwebtoken joi helmet cors morgan
        npm install --save-dev nodemon jest supertest

    - name: Update package.json
      run: |
        cat <<EOF > package.json
        {
          "name": "likhon-sheikh-portfolio",
          "version": "1.0.0",
          "description": "Full-stack developer portfolio",
          "main": "src/server.js",
          "scripts": {
            "start": "node src/server.js",
            "dev": "nodemon src/server.js",
            "test": "jest --detectOpenHandles"
          },
          "keywords": ["portfolio", "full-stack", "node", "express", "mongodb", "vue"],
          "author": "Likhon Sheikh",
          "license": "Apache-2.0",
          "dependencies": {
            "express": "^4.17.1",
            "mongoose": "^5.12.3",
            "bcrypt": "^5.0.1",
            "jsonwebtoken": "^8.5.1",
            "joi": "^17.4.0",
            "helmet": "^4.6.0",
            "cors": "^2.8.5",
            "morgan": "^1.10.0"
          },
          "devDependencies": {
            "nodemon": "^2.0.7",
            "jest": "^27.0.6",
            "supertest": "^6.1.3"
          }
        }
        EOF

    - name: Commit changes
      run: |
        git config --local user.email "actions@github.com"
        git config --local user.name "GitHub Actions"
        git add .

        # Check if there are changes before committing
        if git diff-index --quiet HEAD --; then
          echo "No changes to commit"
        else
          git commit -m "Create advanced project structure with sample files"
          git push origin HEAD:${{ github.ref }}
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
